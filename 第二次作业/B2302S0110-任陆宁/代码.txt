%%  清空环境变量
warning off             % 关闭报警信息
close all               % 关闭开启的图窗
clear                   % 清空变量
clc                     % 清空命令行

%%  导入数据
res = xlsread('数据整理');

%%  划分训练集和测试集
temp = randperm(150);

P_train = res(temp(1: 120), 1: 4)';
T_train = res(temp(1: 120), 5)';
M = size(P_train, 2);

P_test = res(temp(121: end), 1: 4)';
T_test = res(temp(121: end), 5)';
N = size(P_test, 2);

%%  数据归一化
[p_train, ps_input] = mapminmax(P_train, 0, 1);
p_test = mapminmax('apply', P_test, ps_input );
t_train = T_train;
t_test  = T_test ;

%%  转置以适应模型
p_train = p_train'; p_test = p_test';
t_train = t_train'; t_test = t_test';

%%  创建模型
c = 10.0;      % 惩罚因子
g = 0.01;      % 径向基函数参数
cmd = ['-t 2', '-c', num2str(c), '-g', num2str(g)];
model = svmtrain(t_train, p_train, cmd);

%%  仿真测试
T_sim1 = svmpredict(t_train, p_train, model);
T_sim2 = svmpredict(t_test , p_test , model);

%%  性能评价
error1 = sum((T_sim1' == T_train)) / M * 100;
error2 = sum((T_sim2' == T_test )) / N * 100;

%%  数据排序
[T_train, index_1] = sort(T_train);
[T_test , index_2] = sort(T_test );

T_sim1 = T_sim1(index_1);
T_sim2 = T_sim2(index_2);

%%  绘图
figure
plot(1: M, T_train, 'r-*', 1: M, T_sim1, 'b-o', 'LineWidth', 1)
legend('真实值', '预测值')
xlabel('预测样本')
ylabel('预测结果')
string = {'训练集预测结果对比'; ['准确率=' num2str(error1) '%']};
title(string)
grid

figure
plot(1: N, T_test, 'r-*', 1: N, T_sim2, 'b-o', 'LineWidth', 1)
legend('真实值', '预测值')
xlabel('预测样本')
ylabel('预测结果')
string = {'测试集预测结果对比'; ['准确率=' num2str(error2) '%']};
title(string)
grid

%%  混淆矩阵
figure
cm = confusionchart(T_train, T_sim1);
cm.Title = 'Confusion Matrix for Train Data';
cm.ColumnSummary = 'column-normalized';
cm.RowSummary = 'row-normalized';
    
figure
cm = confusionchart(T_test, T_sim2);
cm.Title = 'Confusion Matrix for Test Data';
cm.ColumnSummary = 'column-normalized';
cm.RowSummary = 'row-normalized';


%% 计算评价指标
TP_train = sum(T_sim1 == 1 & T_train == 1); % 训练集真正例数量
FP_train = sum(T_sim1 == 1 & T_train == 0); % 训练集假正例数量
FN_train = sum(T_sim1 == 0 & T_train == 1); % 训练集假反例数量

TP_test = sum(T_sim2 == 1 & T_test == 1); % 测试集真正例数量
FP_test = sum(T_sim2 == 1 & T_test == 0); % 测试集假正例数量
FN_test = sum(T_sim2 == 0 & T_test == 1); % 测试集假反例数量

precision_train = TP_train / (TP_train + FP_train); % 训练集精确率
recall_train = TP_train / (TP_train + FN_train); % 训练集召回率
f1_score_train = 2 * (precision_train * recall_train) / (precision_train + recall_train); % 训练集F1分数

precision_test = TP_test / (TP_test + FP_test); % 测试集精确率
recall_test = TP_test / (TP_test + FN_test); % 测试集召回率
f1_score_test = 2 * (precision_test * recall_test) / (precision_test + recall_test); % 测试集F1分数


%% 输出评价指标结果
disp(['训练集准确率：', num2str(error1), '%']);
disp(['训练集精确率：', num2str(precision_train)]);
disp(['训练集召回率：', num2str(recall_train)]);
disp(['训练集F1分数：', num2str(f1_score_train)]);


disp(['测试集准确率：', num2str(error2), '%']);
disp(['测试集精确率：', num2str(precision_test)]);
disp(['测试集召回率：', num2str(recall_test)]);
disp(['测试集F1分数：', num2str(f1_score_test)]);
